// Code generated by MockGen. DO NOT EDIT.
// Source: libs/cloudfront.go
//
// Generated by this command:
//
//	mockgen -source=libs/cloudfront.go -destination=./libs/cloudfront_mock.go -package=libs
//

// Package libs is a generated GoMock package.
package libs

import (
	context "context"
	reflect "reflect"

	cloudfront "github.com/aws/aws-sdk-go-v2/service/cloudfront"
	types "github.com/aws/aws-sdk-go-v2/service/cloudfront/types"
	gomock "go.uber.org/mock/gomock"
)

// MockCloudFrontClient is a mock of CloudFrontClient interface.
type MockCloudFrontClient struct {
	ctrl     *gomock.Controller
	recorder *MockCloudFrontClientMockRecorder
}

// MockCloudFrontClientMockRecorder is the mock recorder for MockCloudFrontClient.
type MockCloudFrontClientMockRecorder struct {
	mock *MockCloudFrontClient
}

// NewMockCloudFrontClient creates a new mock instance.
func NewMockCloudFrontClient(ctrl *gomock.Controller) *MockCloudFrontClient {
	mock := &MockCloudFrontClient{ctrl: ctrl}
	mock.recorder = &MockCloudFrontClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudFrontClient) EXPECT() *MockCloudFrontClientMockRecorder {
	return m.recorder
}

// CreateKeyValueStore mocks base method.
func (m *MockCloudFrontClient) CreateKeyValueStore(ctx context.Context, params *cloudfront.CreateKeyValueStoreInput, optFns ...func(*cloudfront.Options)) (*cloudfront.CreateKeyValueStoreOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateKeyValueStore", varargs...)
	ret0, _ := ret[0].(*cloudfront.CreateKeyValueStoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKeyValueStore indicates an expected call of CreateKeyValueStore.
func (mr *MockCloudFrontClientMockRecorder) CreateKeyValueStore(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKeyValueStore", reflect.TypeOf((*MockCloudFrontClient)(nil).CreateKeyValueStore), varargs...)
}

// DeleteKeyValueStore mocks base method.
func (m *MockCloudFrontClient) DeleteKeyValueStore(ctx context.Context, params *cloudfront.DeleteKeyValueStoreInput, optFns ...func(*cloudfront.Options)) (*cloudfront.DeleteKeyValueStoreOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteKeyValueStore", varargs...)
	ret0, _ := ret[0].(*cloudfront.DeleteKeyValueStoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteKeyValueStore indicates an expected call of DeleteKeyValueStore.
func (mr *MockCloudFrontClientMockRecorder) DeleteKeyValueStore(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteKeyValueStore", reflect.TypeOf((*MockCloudFrontClient)(nil).DeleteKeyValueStore), varargs...)
}

// DescribeKeyValueStore mocks base method.
func (m *MockCloudFrontClient) DescribeKeyValueStore(ctx context.Context, params *cloudfront.DescribeKeyValueStoreInput, optFns ...func(*cloudfront.Options)) (*cloudfront.DescribeKeyValueStoreOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeKeyValueStore", varargs...)
	ret0, _ := ret[0].(*cloudfront.DescribeKeyValueStoreOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeKeyValueStore indicates an expected call of DescribeKeyValueStore.
func (mr *MockCloudFrontClientMockRecorder) DescribeKeyValueStore(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeKeyValueStore", reflect.TypeOf((*MockCloudFrontClient)(nil).DescribeKeyValueStore), varargs...)
}

// ListKeyValueStores mocks base method.
func (m *MockCloudFrontClient) ListKeyValueStores(ctx context.Context, params *cloudfront.ListKeyValueStoresInput, optFns ...func(*cloudfront.Options)) (*cloudfront.ListKeyValueStoresOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListKeyValueStores", varargs...)
	ret0, _ := ret[0].(*cloudfront.ListKeyValueStoresOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListKeyValueStores indicates an expected call of ListKeyValueStores.
func (mr *MockCloudFrontClientMockRecorder) ListKeyValueStores(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListKeyValueStores", reflect.TypeOf((*MockCloudFrontClient)(nil).ListKeyValueStores), varargs...)
}

// MockKVSImportSource is a mock of KVSImportSource interface.
type MockKVSImportSource struct {
	ctrl     *gomock.Controller
	recorder *MockKVSImportSourceMockRecorder
}

// MockKVSImportSourceMockRecorder is the mock recorder for MockKVSImportSource.
type MockKVSImportSourceMockRecorder struct {
	mock *MockKVSImportSource
}

// NewMockKVSImportSource creates a new mock instance.
func NewMockKVSImportSource(ctrl *gomock.Controller) *MockKVSImportSource {
	mock := &MockKVSImportSource{ctrl: ctrl}
	mock.recorder = &MockKVSImportSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKVSImportSource) EXPECT() *MockKVSImportSourceMockRecorder {
	return m.recorder
}

// ARN mocks base method.
func (m *MockKVSImportSource) ARN() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ARN")
	ret0, _ := ret[0].(string)
	return ret0
}

// ARN indicates an expected call of ARN.
func (mr *MockKVSImportSourceMockRecorder) ARN() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ARN", reflect.TypeOf((*MockKVSImportSource)(nil).ARN))
}

// Type mocks base method.
func (m *MockKVSImportSource) Type() types.ImportSourceType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(types.ImportSourceType)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockKVSImportSourceMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockKVSImportSource)(nil).Type))
}
